// import * as React from "react"

// import { jwtDecode } from "jwt-decode"
// import { sleep } from "./utils/utils"

// export type AuthContext = {
//   isAuthenticated: boolean
//   login: (token: string) => Promise<void>
//   logout: () => Promise<void>
//   user: User | null
// }
// export enum Role {
//   USER = 0,
//   ADMIN = 1
// }

// const AuthContext = React.createContext<AuthContext | null>(null)

// const key = "auth.user"

// function getStoredUser() {
//   const user = localStorage.getItem(key)
//   return user ? jwtDecode<User>(user) : null
// }

// function setStoredToken(user: string | null) {
//   if (user) {
//     localStorage.setItem(key, user)
//   } else {
//     localStorage.removeItem(key)
//   }
// }

// type User = {
//   exp: number
//   username: string
//   role: Role
// }
// export function AuthProvider({ children }: { children: React.ReactNode }) {
//   const [user, setUser] = React.useState<User | null>(getStoredUser())
//   const isAuthenticated = !!user

//   const logout = React.useCallback(async () => {
//     await sleep(250)

//     setStoredToken(null)
//     setUser(null)
//   }, [])

//   const login = React.useCallback(async (token: string) => {
//     await sleep(500)

//     setStoredToken(token)
//     setUser(jwtDecode<User>(token))
//   }, [])

//   React.useEffect(() => {
//     const storedUser = getStoredUser()
//     if (storedUser) {
//       setUser(storedUser)
//     }
//   }, [])

//   // if (getStoredUser() !== null) {
//   //   const query = useQuery({
//   //     queryKey: ["refresh_token"],
//   //     queryFn: async () => {
//   //       console.log("fetching")
//   //       const response = await fetch("http://localhost:3333/authenticated", {
//   //         method: "GET",
//   //         headers: {
//   //           Authorization: `Bearer ${localStorage.getItem("auth.user")}`,
//   //         },
//   //       })

//   //       // Check for unauthorized response
//   //       if (response.status === 401) {
//   //         // Attempt to refresh the token
//   //         const refreshResponse = await fetch("http://localhost:3333/refresh-token", {
//   //           method: "POST",
//   //           headers: {
//   //             Authorization: `Bearer ${localStorage.getItem("auth.user")}`,
//   //           },
//   //         })

//   //         // Check if the refresh was successful
//   //         if (!refreshResponse.ok) {
//   //           throw new Error("Unable to refresh token")
//   //         }

//   //         // Assuming the new token is returned in the response
//   //         const { token } = await refreshResponse.json()
//   //         // Store the new token
//   //         localStorage.setItem("auth.user", token)

//   //         // Retry the original request with the new token
//   //         const retryResponse = await fetch("http://localhost:3333/authenticated", {
//   //           method: "GET",
//   //           headers: {
//   //             Authorization: `Bearer ${token}`,
//   //           },
//   //         })

//   //         if (!retryResponse.ok) {
//   //           throw new Error("Failed to authenticate")
//   //         }

//   //         return await retryResponse.json()
//   //       }

//   //       if (!response.ok) {
//   //         throw new Error("Failed to authenticate")
//   //       }

//   //       return await response.json()
//   //     },
//   //   })
//   //   console.log("data: ", query.data)

//   // }



//   return (
//     <AuthContext.Provider value={{ isAuthenticated, user, login, logout }}>
//       {children}
//     </AuthContext.Provider>
//   )
// }

// export function useAuth() {
//   const context = React.useContext(AuthContext)
//   if (!context) {
//     throw new Error("useAuth must be used within an AuthProvider")
//   }
//   return context
// }


// export const fetchAPIRequestInterceptor = async (endPoint: RequestInfo | URL, token: string, config: RequestInit) => {
//   const { fetch: originalFetch } = window
//   window.fetch = async (...args) => {
//     const headers = new Headers(config.headers)
//     headers.set('Authorization', `Bearer ${token}`)
//     config.headers = headers
//     config.method = 'GET'
//     try {
//       const response = await originalFetch(endPoint, config)
//       if (response.status === 403) {
//         // Refresh token
//         const refreshTokenResponse = await fetch('http://localhost:3333/refresh_token', {
//           method: 'POST',
//           headers: {
//             Authorization: `Bearer ${token}`,
//           },
//         })
//         if (refreshTokenResponse.ok) {
//           const newToken = await refreshTokenResponse.json()
//           // Retry the original request with the new token
//           return fetch(endPoint, {
//             method: 'GET',
//             headers: {
//               Authorization: `Bearer ${newToken}`,
//             },
//           })
//         } else {
//           throw new Error('Failed to refresh token')
//         }
//       }
//       return response
//     } catch (error) {
//       console.error('Error fetching data:', error)
//       throw error
//     }
//   }
// }