
import { Avatar, AvatarFallback, AvatarImage } from "components/ui/avatar"
import { Button } from "components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "components/ui/card"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from "components/ui/dropdown-menu"
import { Input } from "components/ui/input"
import { Label } from "components/ui/label"
import { ArrowRight, Clock, Pencil, Plus, Send, Settings, Trash, Users } from "lucide-react"
import React, { useState } from 'react'
import Logout from "src/components/Logout"

// export const Route = createFileRoute("/(auth)/dashboard")({
//   beforeLoad: ({ context, location }) => {
//     if (!context.auth.isAuthenticated) {
//       throw redirect({
//         to: '/login',
//         search: {
//           redirect: location.href,
//         },
//       })
//     }
//   },
//   component: DashboardPage,
// })

// function DashboardPage() {
//   const auth = useAuth()
//   const [rooms, setRooms] = useState(mockRooms)
//   const [newRoomName, setNewRoomName] = useState("")

//   const handleCreateRoom = (e: React.FormEvent) => {
//     e.preventDefault()
//     if (newRoomName.trim()) {
//       const newRoom = {
//         id: rooms.length + 1,
//         name: newRoomName.trim(),
//         participants: [],
//         createdAt: new Date().toISOString(),
//       }
//       setRooms([newRoom, ...rooms])
//       setNewRoomName("")
//     }
//   }

//   return (
//     <div className="min-h-screen bg-background text-foreground p-8">
//       <div className="max-w-6xl mx-auto">
//         <header className="flex items-center justify-between mb-8">
//           <div className="flex items-center space-x-2">
//             {/* <ChalkboardIcon className="h-8 w-8 text-primary" /> */}
//             <h1 className="text-2xl font-bold text-primary">Hamro Chalkboard</h1>
//           </div>
//           <Logout />
//         </header>

//         <main className="space-y-6">
//           <Card className="bg-card/30 backdrop-blur-md border-primary/20">
//             <CardHeader>
//               <CardTitle>Create a New Room</CardTitle>
//               <CardDescription>Start a new collaborative drawing session</CardDescription>
//             </CardHeader>
//             <CardContent>
//               <form onSubmit={handleCreateRoom} className="flex space-x-2">
//                 <div className="flex-grow">
//                   <Label htmlFor="room-name" className="sr-only">Room Name</Label>
//                   <Input
//                     id="room-name"
//                     placeholder="Enter room name"
//                     value={newRoomName}
//                     onChange={(e) => setNewRoomName(e.target.value)}
//                     className="bg-background/50"
//                   />
//                 </div>
//                 <Button type="submit">
//                   <Plus className="mr-2 h-4 w-4" /> Create Room
//                 </Button>
//               </form>
//             </CardContent>
//           </Card>

//           <Card className="bg-card/30 backdrop-blur-md border-primary/20">
//             <CardHeader>
//               <CardTitle>Your Rooms</CardTitle>
//               <CardDescription>Join an existing collaborative drawing session</CardDescription>
//             </CardHeader>
//             <CardContent>
//               <div className="space-y-4">
//                 {rooms.map((room) => (
//                   <div key={room.id} className="flex items-center justify-between p-4 bg-background/50 rounded-lg">
//                     <div>
//                       <h3 className="font-semibold">{room.name}</h3>
//                       <div className="text-sm text-muted-foreground flex items-center mt-1">
//                         <Users className="h-4 w-4 mr-1" />
//                         <span className="mr-4">{room.participants.length} participants</span>
//                         <Clock className="h-4 w-4 mr-1" />
//                         <span>{new Date(room.createdAt).toLocaleDateString()}</span>
//                       </div>
//                       <div className="flex -space-x-2 overflow-hidden mt-2">
//                         {room.participants.slice(0, 5).map((participant) => (
//                           <Avatar key={participant.id} className="inline-block border-2 border-background">
//                             <AvatarImage src={participant.avatar} alt={participant.name} />
//                             <AvatarFallback>{participant.name.charAt(0)}</AvatarFallback>
//                           </Avatar>
//                         ))}
//                         {room.participants.length > 5 && (
//                           <div className="flex items-center justify-center w-8 h-8 rounded-full bg-primary text-primary-foreground text-xs font-medium border-2 border-background">
//                             +{room.participants.length - 5}
//                           </div>
//                         )}
//                       </div>
//                     </div>
//                     <Button variant="outline" size="sm">
//                       Join <ArrowRight className="ml-2 h-4 w-4" />
//                     </Button>
//                   </div>
//                 ))}
//               </div>
//             </CardContent>
//           </Card>
//         </main>
//       </div>
//     </div>
//   )
// }

// Helper function to generate random pastel colors
const getRandomPastelColor = () => {
  const hue = Math.floor(Math.random() * 360)
  return `hsl(${hue}, 70%, 80%)`
}

// Mock user data
const currentUser = { id: 1, name: "Current User", avatar: "/placeholder.svg?height=32&width=32" }

// This would typically come from your backend
const mockRooms = [
  {
    id: 1,
    name: "Brainstorming Session",
    participants: [
      { id: 1, name: "Current User", avatar: "/placeholder.svg?height=32&width=32" },
      { id: 2, name: "Bob", avatar: "/placeholder.svg?height=32&width=32" },
      { id: 3, name: "Charlie", avatar: "/placeholder.svg?height=32&width=32" },
      { id: 4, name: "David", avatar: "/placeholder.svg?height=32&width=32" },
      { id: 5, name: "Eve", avatar: "/placeholder.svg?height=32&width=32" },
    ],
    createdAt: "2023-06-15T10:00:00Z",
    createdBy: 1
  },
  {
    id: 2,
    name: "Project Planning",
    participants: [
      { id: 6, name: "Frank", avatar: "/placeholder.svg?height=32&width=32" },
      { id: 7, name: "Grace", avatar: "/placeholder.svg?height=32&width=32" },
      { id: 8, name: "Henry", avatar: "/placeholder.svg?height=32&width=32" },
    ],
    createdAt: "2023-06-14T14:30:00Z",
    createdBy: 6
  },
  {
    id: 3,
    name: "Design Review",
    participants: [
      { id: 9, name: "Ivy", avatar: "/placeholder.svg?height=32&width=32" },
      { id: 10, name: "Jack", avatar: "/placeholder.svg?height=32&width=32" },
      { id: 11, name: "Kate", avatar: "/placeholder.svg?height=32&width=32" },
      { id: 1, name: "Current User", avatar: "/placeholder.svg?height=32&width=32" },
    ],
    createdAt: "2023-06-13T09:15:00Z",
    createdBy: 9
  },
]

export default function DashboardPage() {
  const [rooms, setRooms] = useState(mockRooms)
  const [newRoomName, setNewRoomName] = useState("")
  const [inviteEmail, setInviteEmail] = useState("")

  const handleCreateRoom = (e: React.FormEvent) => {
    e.preventDefault()
    if (newRoomName.trim()) {
      const newRoom = {
        id: rooms.length + 1,
        name: newRoomName.trim(),
        participants: [currentUser],
        createdAt: new Date().toISOString(),
        createdBy: currentUser.id
      }
      setRooms([newRoom, ...rooms])
      setNewRoomName("")
    }
  }

  const handleUpdateRoom = (roomId: number, newName: string) => {
    setRooms(rooms.map(room =>
      room.id === roomId ? { ...room, name: newName } : room
    ))
  }

  const handleDeleteRoom = (roomId: number) => {
    setRooms(rooms.filter(room => room.id !== roomId))
  }

  const handleSendInvite = (roomId: number) => {
    // In a real application, this would send an API request to invite the user
    console.log(`Inviting ${inviteEmail} to room ${roomId}`)
    setInviteEmail("")
  }

  const RoomCard = ({ room, isCreator = false }) => (
    <Card key={room.id} className="bg-background/50 backdrop-blur-sm border-primary/20 mb-4">
      <CardHeader>
        <CardTitle className="flex justify-between items-center">
          <span>{room.name}</span>
          {isCreator && (
            <div>
              <Button variant="ghost" size="sm" onClick={() => handleUpdateRoom(room.id, prompt("Enter new room name") || room.name)}>
                <Pencil className="h-4 w-4" />
              </Button>
              <Button variant="ghost" size="sm" onClick={() => handleDeleteRoom(room.id)}>
                <Trash className="h-4 w-4" />
              </Button>
            </div>
          )}
        </CardTitle>
        <CardDescription>
          <div className="flex items-center">
            <Users className="h-4 w-4 mr-1" />
            <span className="mr-4">{room.participants.length} participants</span>
            <Clock className="h-4 w-4 mr-1" />
            <span>{new Date(room.createdAt).toLocaleDateString()}</span>
          </div>
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="flex -space-x-2 overflow-hidden mb-4">
          {room.participants.slice(0, 5).map((participant) => (
            <Avatar key={participant.id} className="inline-block border-2 border-background" style={{ backgroundColor: getRandomPastelColor() }}>
              <AvatarImage src={participant.avatar} alt={participant.name} />
              <AvatarFallback>{participant.name.charAt(0)}</AvatarFallback>
            </Avatar>
          ))}
          {room.participants.length > 5 && (
            <div className="flex items-center justify-center w-8 h-8 rounded-full bg-primary text-primary-foreground text-xs font-medium border-2 border-background">
              +{room.participants.length - 5}
            </div>
          )}
        </div>
        <div className="flex space-x-2">
          <Input
            placeholder="Enter email to invite"
            value={inviteEmail}
            onChange={(e) => setInviteEmail(e.target.value)}
            className="flex-grow"
          />
          <Button onClick={() => handleSendInvite(room.id)}>
            <Send className="h-4 w-4 mr-2" /> Invite
          </Button>
        </div>
      </CardContent>
      <CardFooter>
        <Button className="w-full">
          Join <ArrowRight className="ml-2 h-4 w-4" />
        </Button>
      </CardFooter>
    </Card>
  )

  const createdRooms = rooms.filter(room => room.createdBy === currentUser.id)
  const participatingRooms = rooms.filter(room =>
    room.createdBy !== currentUser.id && room.participants.some(p => p.id === currentUser.id)
  )

  return (
    <div className="min-h-screen bg-background text-foreground p-8">
      <div className="max-w-6xl mx-auto">
        <header className="flex items-center justify-between mb-8">
          <div className="flex items-center space-x-2">
            {/* <ChalkboardIcon className="h-8 w-8 text-primary" /> */}
            <h1 className="text-2xl font-bold text-primary">Hamro Chalkboard</h1>
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Avatar className="cursor-pointer">
                <AvatarImage src={currentUser.avatar} alt={currentUser.name} />
                <AvatarFallback>{currentUser.name.charAt(0)}</AvatarFallback>
              </Avatar>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuLabel>My Account</DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem>
                <Settings className="mr-2 h-4 w-4" />
                <span>Settings</span>
              </DropdownMenuItem>
              <DropdownMenuItem>
                <Logout />
                {/* <span>Log out</span> */}
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
          {/* <Button variant="outline">Logout</Button> */}
        </header>

        <main className="space-y-6">
          <Card className="bg-card/30 backdrop-blur-md border-primary/20">
            <CardHeader>
              <CardTitle>Create a New Room</CardTitle>
              <CardDescription>Start a new collaborative drawing session</CardDescription>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleCreateRoom} className="flex space-x-2">
                <div className="flex-grow">
                  <Label htmlFor="room-name" className="sr-only">Room Name</Label>
                  <Input
                    id="room-name"
                    placeholder="Enter room name"
                    value={newRoomName}
                    onChange={(e) => setNewRoomName(e.target.value)}
                    className="bg-background/50"
                  />
                </div>
                <Button type="submit">
                  <Plus className="mr-2 h-4 w-4" /> Create Room
                </Button>
              </form>
            </CardContent>
          </Card>

          <div className="grid md:grid-cols-2 gap-6">
            <div>
              <h2 className="text-2xl font-bold mb-4">Your Created Rooms</h2>
              {createdRooms.map(room => (
                <RoomCard key={room.id} room={room} isCreator={true} />
              ))}
            </div>
            <div>
              <h2 className="text-2xl font-bold mb-4">Rooms You're Participating In</h2>
              {participatingRooms.map(room => (
                <RoomCard key={room.id} room={room} />
              ))}
            </div>
          </div>
        </main>
      </div>
    </div>
  )
}